# -*- coding: utf-8 -*-
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,autoencoding
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class HouyiErrorCode(object):
  """
  定义调用返回状态码
  """
  COMMON_OK = 200
  UNAUTHORIZED_ERROR = 401
  DATA_NOT_FOUND = 404

  _VALUES_TO_NAMES = {
    200: "COMMON_OK",
    401: "UNAUTHORIZED_ERROR",
    404: "DATA_NOT_FOUND",
  }

  _NAMES_TO_VALUES = {
    "COMMON_OK": 200,
    "UNAUTHORIZED_ERROR": 401,
    "DATA_NOT_FOUND": 404,
  }


class ReqHeader(object):
  """
  请求头部结构体

  Attributes:
   - searchId: @Description("searchId")
   - userId: @Description("db.amazon_info.userId")
   - profileId: @Description("db.profile_info.profileId")
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'searchId', None, None, ), # 1
    (2, TType.STRING, 'userId', None, None, ), # 2
    (3, TType.I64, 'profileId', None, None, ), # 3
  )

  def __init__(self, searchId=None, userId=None, profileId=None,):
    self.searchId = searchId
    self.userId = userId
    self.profileId = profileId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.searchId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.userId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.profileId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReqHeader')
    if self.searchId is not None:
      oprot.writeFieldBegin('searchId', TType.I64, 1)
      oprot.writeI64(self.searchId)
      oprot.writeFieldEnd()
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.STRING, 2)
      if isinstance(self.userId, unicode):
        oprot.writeString(self.userId.encode('utf-8'))
      else:
        oprot.writeString(self.userId)
      oprot.writeFieldEnd()
    if self.profileId is not None:
      oprot.writeFieldBegin('profileId', TType.I64, 3)
      oprot.writeI64(self.profileId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RespHeader(object):
  """
  响应头部结构体

  Attributes:
   - searchId: @Description("searchId")
   - errorCode: @Description("错误码")
   - errorMessage: @Description("错误信息")
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'searchId', None, None, ), # 1
    (2, TType.I32, 'errorCode', None, None, ), # 2
    (3, TType.STRING, 'errorMessage', None, None, ), # 3
  )

  def __init__(self, searchId=None, errorCode=None, errorMessage=None,):
    self.searchId = searchId
    self.errorCode = errorCode
    self.errorMessage = errorMessage

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.searchId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.errorCode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.errorMessage = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RespHeader')
    if self.searchId is not None:
      oprot.writeFieldBegin('searchId', TType.I64, 1)
      oprot.writeI64(self.searchId)
      oprot.writeFieldEnd()
    if self.errorCode is not None:
      oprot.writeFieldBegin('errorCode', TType.I32, 2)
      oprot.writeI32(self.errorCode)
      oprot.writeFieldEnd()
    if self.errorMessage is not None:
      oprot.writeFieldBegin('errorMessage', TType.STRING, 3)
      if isinstance(self.errorMessage, unicode):
        oprot.writeString(self.errorMessage.encode('utf-8'))
      else:
        oprot.writeString(self.errorMessage)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
