# -*- coding: utf-8 -*-
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,autoencoding
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface(object):
  def getAccessToken(self, reqHeader):
    """
    用于获取access token

    Parameters:
     - reqHeader
    """
    pass

  def Keyword(self, reqHeader, keywordInfos, operation):
    """
    批量操作keyword, 创建、更新过程为一次请求，即没有部分成功的情况
    删除会对每一个id都做一次api请求，会有部分成功的情况,返回失败的操作对象list

    Parameters:
     - reqHeader
     - keywordInfos: 批量创建更新的keyword info信息，list长度不能大于1000
     - operation: 表明对象操作
    """
    pass

  def NegativeKeyword(self, reqHeader, keywordInfos, operation):
    """
    批量操作keyword, 创建、更新过程为一次请求，即没有部分成功的情况
    删除会对每一个id都做一次api请求，会有部分成功的情况,返回失败的操作对象list

    Parameters:
     - reqHeader
     - keywordInfos: 批量创建更新的keyword info信息，list长度不能大于1000
     - operation: 表明对象操作
    """
    pass

  def CampaignNegativeKeyword(self, reqHeader, keywordInfos, operation):
    """
    批量操作campaign negative keyword, 创建、更新过程为一次请求，即没有部分成功的情况
    删除会对每一个id都做一次api请求，会有部分成功的情况,返回失败的操作对象list

    Parameters:
     - reqHeader
     - keywordInfos: 批量创建更新的keyword info信息，list长度不能大于1000
     - operation: 表明对象操作
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def getAccessToken(self, reqHeader):
    """
    用于获取access token

    Parameters:
     - reqHeader
    """
    self.send_getAccessToken(reqHeader)
    return self.recv_getAccessToken()

  def send_getAccessToken(self, reqHeader):
    self._oprot.writeMessageBegin('getAccessToken', TMessageType.CALL, self._seqid)
    args = getAccessToken_args()
    args.reqHeader = reqHeader
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAccessToken(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getAccessToken_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAccessToken failed: unknown result");

  def Keyword(self, reqHeader, keywordInfos, operation):
    """
    批量操作keyword, 创建、更新过程为一次请求，即没有部分成功的情况
    删除会对每一个id都做一次api请求，会有部分成功的情况,返回失败的操作对象list

    Parameters:
     - reqHeader
     - keywordInfos: 批量创建更新的keyword info信息，list长度不能大于1000
     - operation: 表明对象操作
    """
    self.send_Keyword(reqHeader, keywordInfos, operation)
    return self.recv_Keyword()

  def send_Keyword(self, reqHeader, keywordInfos, operation):
    self._oprot.writeMessageBegin('Keyword', TMessageType.CALL, self._seqid)
    args = Keyword_args()
    args.reqHeader = reqHeader
    args.keywordInfos = keywordInfos
    args.operation = operation
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_Keyword(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = Keyword_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "Keyword failed: unknown result");

  def NegativeKeyword(self, reqHeader, keywordInfos, operation):
    """
    批量操作keyword, 创建、更新过程为一次请求，即没有部分成功的情况
    删除会对每一个id都做一次api请求，会有部分成功的情况,返回失败的操作对象list

    Parameters:
     - reqHeader
     - keywordInfos: 批量创建更新的keyword info信息，list长度不能大于1000
     - operation: 表明对象操作
    """
    self.send_NegativeKeyword(reqHeader, keywordInfos, operation)
    return self.recv_NegativeKeyword()

  def send_NegativeKeyword(self, reqHeader, keywordInfos, operation):
    self._oprot.writeMessageBegin('NegativeKeyword', TMessageType.CALL, self._seqid)
    args = NegativeKeyword_args()
    args.reqHeader = reqHeader
    args.keywordInfos = keywordInfos
    args.operation = operation
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_NegativeKeyword(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = NegativeKeyword_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "NegativeKeyword failed: unknown result");

  def CampaignNegativeKeyword(self, reqHeader, keywordInfos, operation):
    """
    批量操作campaign negative keyword, 创建、更新过程为一次请求，即没有部分成功的情况
    删除会对每一个id都做一次api请求，会有部分成功的情况,返回失败的操作对象list

    Parameters:
     - reqHeader
     - keywordInfos: 批量创建更新的keyword info信息，list长度不能大于1000
     - operation: 表明对象操作
    """
    self.send_CampaignNegativeKeyword(reqHeader, keywordInfos, operation)
    return self.recv_CampaignNegativeKeyword()

  def send_CampaignNegativeKeyword(self, reqHeader, keywordInfos, operation):
    self._oprot.writeMessageBegin('CampaignNegativeKeyword', TMessageType.CALL, self._seqid)
    args = CampaignNegativeKeyword_args()
    args.reqHeader = reqHeader
    args.keywordInfos = keywordInfos
    args.operation = operation
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_CampaignNegativeKeyword(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = CampaignNegativeKeyword_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "CampaignNegativeKeyword failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["getAccessToken"] = Processor.process_getAccessToken
    self._processMap["Keyword"] = Processor.process_Keyword
    self._processMap["NegativeKeyword"] = Processor.process_NegativeKeyword
    self._processMap["CampaignNegativeKeyword"] = Processor.process_CampaignNegativeKeyword

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_getAccessToken(self, seqid, iprot, oprot):
    args = getAccessToken_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAccessToken_result()
    result.success = self._handler.getAccessToken(args.reqHeader)
    oprot.writeMessageBegin("getAccessToken", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_Keyword(self, seqid, iprot, oprot):
    args = Keyword_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = Keyword_result()
    result.success = self._handler.Keyword(args.reqHeader, args.keywordInfos, args.operation)
    oprot.writeMessageBegin("Keyword", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_NegativeKeyword(self, seqid, iprot, oprot):
    args = NegativeKeyword_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = NegativeKeyword_result()
    result.success = self._handler.NegativeKeyword(args.reqHeader, args.keywordInfos, args.operation)
    oprot.writeMessageBegin("NegativeKeyword", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_CampaignNegativeKeyword(self, seqid, iprot, oprot):
    args = CampaignNegativeKeyword_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = CampaignNegativeKeyword_result()
    result.success = self._handler.CampaignNegativeKeyword(args.reqHeader, args.keywordInfos, args.operation)
    oprot.writeMessageBegin("CampaignNegativeKeyword", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class getAccessToken_args(object):
  """
  Attributes:
   - reqHeader
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'reqHeader', (xxx_thrift.houyi_common_types.ttypes.ReqHeader, xxx_thrift.houyi_common_types.ttypes.ReqHeader.thrift_spec), None, ), # 1
  )

  def __init__(self, reqHeader=None,):
    self.reqHeader = reqHeader

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.reqHeader = xxx_thrift.houyi_common_types.ttypes.ReqHeader()
          self.reqHeader.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAccessToken_args')
    if self.reqHeader is not None:
      oprot.writeFieldBegin('reqHeader', TType.STRUCT, 1)
      self.reqHeader.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAccessToken_result(object):
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xxx_thrift.houyi_info_server_types.ttypes.GetAccessTokenResp, xxx_thrift.houyi_info_server_types.ttypes.GetAccessTokenResp.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xxx_thrift.houyi_info_server_types.ttypes.GetAccessTokenResp()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAccessToken_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Keyword_args(object):
  """
  Attributes:
   - reqHeader
   - keywordInfos: 批量创建更新的keyword info信息，list长度不能大于1000
   - operation: 表明对象操作
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'reqHeader', (xxx_thrift.houyi_common_types.ttypes.ReqHeader, xxx_thrift.houyi_common_types.ttypes.ReqHeader.thrift_spec), None, ), # 1
    (2, TType.LIST, 'keywordInfos', (TType.STRUCT,(xxx_thrift.houyi_info_server_types.ttypes.KeywordInfo, xxx_thrift.houyi_info_server_types.ttypes.KeywordInfo.thrift_spec)), None, ), # 2
    (3, TType.I32, 'operation', None, None, ), # 3
  )

  def __init__(self, reqHeader=None, keywordInfos=None, operation=None,):
    self.reqHeader = reqHeader
    self.keywordInfos = keywordInfos
    self.operation = operation

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.reqHeader = xxx_thrift.houyi_common_types.ttypes.ReqHeader()
          self.reqHeader.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.keywordInfos = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = xxx_thrift.houyi_info_server_types.ttypes.KeywordInfo()
            _elem5.read(iprot)
            self.keywordInfos.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.operation = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Keyword_args')
    if self.reqHeader is not None:
      oprot.writeFieldBegin('reqHeader', TType.STRUCT, 1)
      self.reqHeader.write(oprot)
      oprot.writeFieldEnd()
    if self.keywordInfos is not None:
      oprot.writeFieldBegin('keywordInfos', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.keywordInfos))
      for iter6 in self.keywordInfos:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.operation is not None:
      oprot.writeFieldBegin('operation', TType.I32, 3)
      oprot.writeI32(self.operation)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Keyword_result(object):
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xxx_thrift.houyi_info_server_types.ttypes.KeywordResopnse, xxx_thrift.houyi_info_server_types.ttypes.KeywordResopnse.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xxx_thrift.houyi_info_server_types.ttypes.KeywordResopnse()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Keyword_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NegativeKeyword_args(object):
  """
  Attributes:
   - reqHeader
   - keywordInfos: 批量创建更新的keyword info信息，list长度不能大于1000
   - operation: 表明对象操作
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'reqHeader', (xxx_thrift.houyi_common_types.ttypes.ReqHeader, xxx_thrift.houyi_common_types.ttypes.ReqHeader.thrift_spec), None, ), # 1
    (2, TType.LIST, 'keywordInfos', (TType.STRUCT,(xxx_thrift.houyi_info_server_types.ttypes.KeywordInfo, xxx_thrift.houyi_info_server_types.ttypes.KeywordInfo.thrift_spec)), None, ), # 2
    (3, TType.I32, 'operation', None, None, ), # 3
  )

  def __init__(self, reqHeader=None, keywordInfos=None, operation=None,):
    self.reqHeader = reqHeader
    self.keywordInfos = keywordInfos
    self.operation = operation

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.reqHeader = xxx_thrift.houyi_common_types.ttypes.ReqHeader()
          self.reqHeader.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.keywordInfos = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = xxx_thrift.houyi_info_server_types.ttypes.KeywordInfo()
            _elem12.read(iprot)
            self.keywordInfos.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.operation = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NegativeKeyword_args')
    if self.reqHeader is not None:
      oprot.writeFieldBegin('reqHeader', TType.STRUCT, 1)
      self.reqHeader.write(oprot)
      oprot.writeFieldEnd()
    if self.keywordInfos is not None:
      oprot.writeFieldBegin('keywordInfos', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.keywordInfos))
      for iter13 in self.keywordInfos:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.operation is not None:
      oprot.writeFieldBegin('operation', TType.I32, 3)
      oprot.writeI32(self.operation)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NegativeKeyword_result(object):
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xxx_thrift.houyi_info_server_types.ttypes.NegativeKeywordResopnse, xxx_thrift.houyi_info_server_types.ttypes.NegativeKeywordResopnse.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xxx_thrift.houyi_info_server_types.ttypes.NegativeKeywordResopnse()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NegativeKeyword_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CampaignNegativeKeyword_args(object):
  """
  Attributes:
   - reqHeader
   - keywordInfos: 批量创建更新的keyword info信息，list长度不能大于1000
   - operation: 表明对象操作
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'reqHeader', (xxx_thrift.houyi_common_types.ttypes.ReqHeader, xxx_thrift.houyi_common_types.ttypes.ReqHeader.thrift_spec), None, ), # 1
    (2, TType.LIST, 'keywordInfos', (TType.STRUCT,(xxx_thrift.houyi_info_server_types.ttypes.KeywordInfo, xxx_thrift.houyi_info_server_types.ttypes.KeywordInfo.thrift_spec)), None, ), # 2
    (3, TType.I32, 'operation', None, None, ), # 3
  )

  def __init__(self, reqHeader=None, keywordInfos=None, operation=None,):
    self.reqHeader = reqHeader
    self.keywordInfos = keywordInfos
    self.operation = operation

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.reqHeader = xxx_thrift.houyi_common_types.ttypes.ReqHeader()
          self.reqHeader.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.keywordInfos = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = xxx_thrift.houyi_info_server_types.ttypes.KeywordInfo()
            _elem19.read(iprot)
            self.keywordInfos.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.operation = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CampaignNegativeKeyword_args')
    if self.reqHeader is not None:
      oprot.writeFieldBegin('reqHeader', TType.STRUCT, 1)
      self.reqHeader.write(oprot)
      oprot.writeFieldEnd()
    if self.keywordInfos is not None:
      oprot.writeFieldBegin('keywordInfos', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.keywordInfos))
      for iter20 in self.keywordInfos:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.operation is not None:
      oprot.writeFieldBegin('operation', TType.I32, 3)
      oprot.writeI32(self.operation)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CampaignNegativeKeyword_result(object):
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xxx_thrift.houyi_info_server_types.ttypes.CampaignNegativeKeywordResponse, xxx_thrift.houyi_info_server_types.ttypes.CampaignNegativeKeywordResponse.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xxx_thrift.houyi_info_server_types.ttypes.CampaignNegativeKeywordResponse()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CampaignNegativeKeyword_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
