# -*- coding: utf-8 -*-
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,autoencoding
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import domob_thrift.houyi_common_types.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class InfoObjectOperation(object):
  """
  操作类型，按照api对应，create、update、delete
           api请求method，post 、put、   delete
  """
  CREATE = 0
  UPDATE = 1
  DELETE = 2

  _VALUES_TO_NAMES = {
    0: "CREATE",
    1: "UPDATE",
    2: "DELETE",
  }

  _NAMES_TO_VALUES = {
    "CREATE": 0,
    "UPDATE": 1,
    "DELETE": 2,
  }


class GetAccessTokenResp(object):
  """
  用于请求access token
  返回直接可用的token

  Attributes:
   - respHeader
   - token
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'respHeader', (domob_thrift.houyi_common_types.ttypes.RespHeader, domob_thrift.houyi_common_types.ttypes.RespHeader.thrift_spec), None, ), # 1
    (2, TType.STRING, 'token', None, None, ), # 2
  )

  def __init__(self, respHeader=None, token=None,):
    self.respHeader = respHeader
    self.token = token

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.respHeader = domob_thrift.houyi_common_types.ttypes.RespHeader()
          self.respHeader.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.token = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetAccessTokenResp')
    if self.respHeader is not None:
      oprot.writeFieldBegin('respHeader', TType.STRUCT, 1)
      self.respHeader.write(oprot)
      oprot.writeFieldEnd()
    if self.token is not None:
      oprot.writeFieldBegin('token', TType.STRING, 2)
      if isinstance(self.token, unicode):
        oprot.writeString(self.token.encode('utf-8'))
      else:
        oprot.writeString(self.token)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class KeywordInfo(object):
  """
  创建、更新keyword时的必要信息,除说明其余字段均为调用必填字段

  Attributes:
   - keywordId: 创建时不需要填写
   - campaignId
   - adGroupId
   - state
   - keywordText
   - matchType
   - bid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'keywordId', None, None, ), # 1
    (2, TType.I64, 'campaignId', None, None, ), # 2
    (3, TType.I64, 'adGroupId', None, None, ), # 3
    (4, TType.STRING, 'state', None, None, ), # 4
    (5, TType.STRING, 'keywordText', None, None, ), # 5
    (6, TType.STRING, 'matchType', None, None, ), # 6
    (7, TType.DOUBLE, 'bid', None, None, ), # 7
  )

  def __init__(self, keywordId=None, campaignId=None, adGroupId=None, state=None, keywordText=None, matchType=None, bid=None,):
    self.keywordId = keywordId
    self.campaignId = campaignId
    self.adGroupId = adGroupId
    self.state = state
    self.keywordText = keywordText
    self.matchType = matchType
    self.bid = bid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.keywordId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.campaignId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.adGroupId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.state = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.keywordText = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.matchType = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.bid = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('KeywordInfo')
    if self.keywordId is not None:
      oprot.writeFieldBegin('keywordId', TType.I64, 1)
      oprot.writeI64(self.keywordId)
      oprot.writeFieldEnd()
    if self.campaignId is not None:
      oprot.writeFieldBegin('campaignId', TType.I64, 2)
      oprot.writeI64(self.campaignId)
      oprot.writeFieldEnd()
    if self.adGroupId is not None:
      oprot.writeFieldBegin('adGroupId', TType.I64, 3)
      oprot.writeI64(self.adGroupId)
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.STRING, 4)
      if isinstance(self.state, unicode):
        oprot.writeString(self.state.encode('utf-8'))
      else:
        oprot.writeString(self.state)
      oprot.writeFieldEnd()
    if self.keywordText is not None:
      oprot.writeFieldBegin('keywordText', TType.STRING, 5)
      if isinstance(self.keywordText, unicode):
        oprot.writeString(self.keywordText.encode('utf-8'))
      else:
        oprot.writeString(self.keywordText)
      oprot.writeFieldEnd()
    if self.matchType is not None:
      oprot.writeFieldBegin('matchType', TType.STRING, 6)
      if isinstance(self.matchType, unicode):
        oprot.writeString(self.matchType.encode('utf-8'))
      else:
        oprot.writeString(self.matchType)
      oprot.writeFieldEnd()
    if self.bid is not None:
      oprot.writeFieldBegin('bid', TType.DOUBLE, 7)
      oprot.writeDouble(self.bid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NegativeKeywordInfo(object):
  """
  创建、更新negative keyword时的必要信息,除说明其余字段均为调用必填字段

  Attributes:
   - keywordId: 创建时不需要填写
   - campaignId
   - adGroupId
   - state
   - keywordText
   - matchType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'keywordId', None, None, ), # 1
    (2, TType.I64, 'campaignId', None, None, ), # 2
    (3, TType.I64, 'adGroupId', None, None, ), # 3
    (4, TType.STRING, 'state', None, None, ), # 4
    (5, TType.STRING, 'keywordText', None, None, ), # 5
    (6, TType.STRING, 'matchType', None, None, ), # 6
  )

  def __init__(self, keywordId=None, campaignId=None, adGroupId=None, state=None, keywordText=None, matchType=None,):
    self.keywordId = keywordId
    self.campaignId = campaignId
    self.adGroupId = adGroupId
    self.state = state
    self.keywordText = keywordText
    self.matchType = matchType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.keywordId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.campaignId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.adGroupId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.state = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.keywordText = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.matchType = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NegativeKeywordInfo')
    if self.keywordId is not None:
      oprot.writeFieldBegin('keywordId', TType.I64, 1)
      oprot.writeI64(self.keywordId)
      oprot.writeFieldEnd()
    if self.campaignId is not None:
      oprot.writeFieldBegin('campaignId', TType.I64, 2)
      oprot.writeI64(self.campaignId)
      oprot.writeFieldEnd()
    if self.adGroupId is not None:
      oprot.writeFieldBegin('adGroupId', TType.I64, 3)
      oprot.writeI64(self.adGroupId)
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.STRING, 4)
      if isinstance(self.state, unicode):
        oprot.writeString(self.state.encode('utf-8'))
      else:
        oprot.writeString(self.state)
      oprot.writeFieldEnd()
    if self.keywordText is not None:
      oprot.writeFieldBegin('keywordText', TType.STRING, 5)
      if isinstance(self.keywordText, unicode):
        oprot.writeString(self.keywordText.encode('utf-8'))
      else:
        oprot.writeString(self.keywordText)
      oprot.writeFieldEnd()
    if self.matchType is not None:
      oprot.writeFieldBegin('matchType', TType.STRING, 6)
      if isinstance(self.matchType, unicode):
        oprot.writeString(self.matchType.encode('utf-8'))
      else:
        oprot.writeString(self.matchType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CampaignNegativeKeywordInfo(object):
  """
  创建、更新campaign negative keyword时的必要信息,除说明其余字段均为调用必填字段

  Attributes:
   - keywordId: 创建时不需要填写
   - campaignId
   - state
   - keywordText
   - matchType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'keywordId', None, None, ), # 1
    (2, TType.I64, 'campaignId', None, None, ), # 2
    (3, TType.STRING, 'state', None, None, ), # 3
    (4, TType.STRING, 'keywordText', None, None, ), # 4
    (5, TType.STRING, 'matchType', None, None, ), # 5
  )

  def __init__(self, keywordId=None, campaignId=None, state=None, keywordText=None, matchType=None,):
    self.keywordId = keywordId
    self.campaignId = campaignId
    self.state = state
    self.keywordText = keywordText
    self.matchType = matchType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.keywordId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.campaignId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.state = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.keywordText = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.matchType = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CampaignNegativeKeywordInfo')
    if self.keywordId is not None:
      oprot.writeFieldBegin('keywordId', TType.I64, 1)
      oprot.writeI64(self.keywordId)
      oprot.writeFieldEnd()
    if self.campaignId is not None:
      oprot.writeFieldBegin('campaignId', TType.I64, 2)
      oprot.writeI64(self.campaignId)
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.STRING, 3)
      if isinstance(self.state, unicode):
        oprot.writeString(self.state.encode('utf-8'))
      else:
        oprot.writeString(self.state)
      oprot.writeFieldEnd()
    if self.keywordText is not None:
      oprot.writeFieldBegin('keywordText', TType.STRING, 4)
      if isinstance(self.keywordText, unicode):
        oprot.writeString(self.keywordText.encode('utf-8'))
      else:
        oprot.writeString(self.keywordText)
      oprot.writeFieldEnd()
    if self.matchType is not None:
      oprot.writeFieldBegin('matchType', TType.STRING, 5)
      if isinstance(self.matchType, unicode):
        oprot.writeString(self.matchType.encode('utf-8'))
      else:
        oprot.writeString(self.matchType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class KeywordResopnse(object):
  """
  keyword 相关操作返回

  Attributes:
   - header
   - failedKeywordInfos
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'header', (domob_thrift.houyi_common_types.ttypes.RespHeader, domob_thrift.houyi_common_types.ttypes.RespHeader.thrift_spec), None, ), # 1
    (2, TType.LIST, 'failedKeywordInfos', (TType.STRUCT,(KeywordInfo, KeywordInfo.thrift_spec)), None, ), # 2
  )

  def __init__(self, header=None, failedKeywordInfos=None,):
    self.header = header
    self.failedKeywordInfos = failedKeywordInfos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.header = domob_thrift.houyi_common_types.ttypes.RespHeader()
          self.header.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.failedKeywordInfos = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = KeywordInfo()
            _elem5.read(iprot)
            self.failedKeywordInfos.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('KeywordResopnse')
    if self.header is not None:
      oprot.writeFieldBegin('header', TType.STRUCT, 1)
      self.header.write(oprot)
      oprot.writeFieldEnd()
    if self.failedKeywordInfos is not None:
      oprot.writeFieldBegin('failedKeywordInfos', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.failedKeywordInfos))
      for iter6 in self.failedKeywordInfos:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NegativeKeywordResopnse(object):
  """
  negative keyword 相关操作返回

  Attributes:
   - header
   - failedNegativeKeywordInfos
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'header', (domob_thrift.houyi_common_types.ttypes.RespHeader, domob_thrift.houyi_common_types.ttypes.RespHeader.thrift_spec), None, ), # 1
    (2, TType.LIST, 'failedNegativeKeywordInfos', (TType.STRUCT,(NegativeKeywordInfo, NegativeKeywordInfo.thrift_spec)), None, ), # 2
  )

  def __init__(self, header=None, failedNegativeKeywordInfos=None,):
    self.header = header
    self.failedNegativeKeywordInfos = failedNegativeKeywordInfos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.header = domob_thrift.houyi_common_types.ttypes.RespHeader()
          self.header.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.failedNegativeKeywordInfos = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = NegativeKeywordInfo()
            _elem12.read(iprot)
            self.failedNegativeKeywordInfos.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NegativeKeywordResopnse')
    if self.header is not None:
      oprot.writeFieldBegin('header', TType.STRUCT, 1)
      self.header.write(oprot)
      oprot.writeFieldEnd()
    if self.failedNegativeKeywordInfos is not None:
      oprot.writeFieldBegin('failedNegativeKeywordInfos', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.failedNegativeKeywordInfos))
      for iter13 in self.failedNegativeKeywordInfos:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CampaignNegativeKeywordResponse(object):
  """
  campaign negative keyword 相关操作返回

  Attributes:
   - header
   - failedCampaignNegativeKeywordInfos
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'header', (domob_thrift.houyi_common_types.ttypes.RespHeader, domob_thrift.houyi_common_types.ttypes.RespHeader.thrift_spec), None, ), # 1
    (2, TType.LIST, 'failedCampaignNegativeKeywordInfos', (TType.STRUCT,(CampaignNegativeKeywordInfo, CampaignNegativeKeywordInfo.thrift_spec)), None, ), # 2
  )

  def __init__(self, header=None, failedCampaignNegativeKeywordInfos=None,):
    self.header = header
    self.failedCampaignNegativeKeywordInfos = failedCampaignNegativeKeywordInfos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.header = domob_thrift.houyi_common_types.ttypes.RespHeader()
          self.header.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.failedCampaignNegativeKeywordInfos = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = CampaignNegativeKeywordInfo()
            _elem19.read(iprot)
            self.failedCampaignNegativeKeywordInfos.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CampaignNegativeKeywordResponse')
    if self.header is not None:
      oprot.writeFieldBegin('header', TType.STRUCT, 1)
      self.header.write(oprot)
      oprot.writeFieldEnd()
    if self.failedCampaignNegativeKeywordInfos is not None:
      oprot.writeFieldBegin('failedCampaignNegativeKeywordInfos', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.failedCampaignNegativeKeywordInfos))
      for iter20 in self.failedCampaignNegativeKeywordInfos:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
